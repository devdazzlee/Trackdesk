version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trackdesk-postgres
    environment:
      POSTGRES_DB: trackdesk_db
      POSTGRES_USER: trackdesk_user
      POSTGRES_PASSWORD: trackdesk_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - trackdesk-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: trackdesk-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trackdesk-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trackdesk-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://trackdesk_user:trackdesk_password@postgres:5432/trackdesk_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key
      PORT: 3002
      FRONTEND_URL: http://localhost:3000
      CDN_URL: http://localhost:3001
    ports:
      - "3002:3002"
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - trackdesk-network
    restart: unless-stopped

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: trackdesk-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3002/api
      NEXT_PUBLIC_CDN_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - trackdesk-network
    restart: unless-stopped

  # CDN Server (Nginx)
  cdn:
    image: nginx:alpine
    container_name: trackdesk-cdn
    ports:
      - "3001:80"
    volumes:
      - ./frontend/public:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - trackdesk-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: trackdesk-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - cdn
    networks:
      - trackdesk-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  trackdesk-network:
    driver: bridge
