-- Migration: Add Referral System Tables
-- Description: Adds referral code management and tracking tables

-- Create referral_codes table
CREATE TABLE IF NOT EXISTS referral_codes (
    id TEXT PRIMARY KEY DEFAULT 'ref_' || uuid_generate_v4()::text,
    affiliate_id TEXT NOT NULL REFERENCES affiliate_profiles(id) ON DELETE CASCADE,
    code TEXT UNIQUE NOT NULL,
    type referral_type DEFAULT 'BOTH',
    commission_rate DECIMAL(5,2) NOT NULL,
    product_id TEXT,
    max_uses INTEGER,
    current_uses INTEGER DEFAULT 0,
    expires_at TIMESTAMP,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create referral_usages table
CREATE TABLE IF NOT EXISTS referral_usages (
    id TEXT PRIMARY KEY DEFAULT 'usage_' || uuid_generate_v4()::text,
    referral_code_id TEXT NOT NULL REFERENCES referral_codes(id) ON DELETE CASCADE,
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    type referral_type NOT NULL,
    product_id TEXT,
    order_value DECIMAL(12,2),
    commission_amount DECIMAL(12,2) NOT NULL,
    status referral_status DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Add enums for referral system
DO $$ BEGIN
    CREATE TYPE referral_type AS ENUM ('SIGNUP', 'PRODUCT', 'BOTH');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE referral_status AS ENUM ('PENDING', 'APPROVED', 'PAID', 'REJECTED');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_referral_codes_affiliate_id ON referral_codes(affiliate_id);
CREATE INDEX IF NOT EXISTS idx_referral_codes_code ON referral_codes(code);
CREATE INDEX IF NOT EXISTS idx_referral_codes_active ON referral_codes(is_active, expires_at);
CREATE INDEX IF NOT EXISTS idx_referral_usages_referral_code_id ON referral_usages(referral_code_id);
CREATE INDEX IF NOT EXISTS idx_referral_usages_user_id ON referral_usages(user_id);
CREATE INDEX IF NOT EXISTS idx_referral_usages_status ON referral_usages(status);
CREATE INDEX IF NOT EXISTS idx_referral_usages_created_at ON referral_usages(created_at);

-- Add referral_code_id to commissions table for tracking
ALTER TABLE commissions ADD COLUMN IF NOT EXISTS referral_code_id TEXT REFERENCES referral_codes(id) ON DELETE SET NULL;
ALTER TABLE commissions ADD COLUMN IF NOT EXISTS referral_usage_id TEXT REFERENCES referral_usages(id) ON DELETE SET NULL;
ALTER TABLE commissions ADD COLUMN IF NOT EXISTS type TEXT DEFAULT 'CONVERSION';
ALTER TABLE commissions ADD COLUMN IF NOT EXISTS metadata JSONB DEFAULT '{}';

-- Create index for referral code in commissions
CREATE INDEX IF NOT EXISTS idx_commissions_referral_code_id ON commissions(referral_code_id);
CREATE INDEX IF NOT EXISTS idx_commissions_type ON commissions(type);

-- Add triggers for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_referral_codes_updated_at 
    BEFORE UPDATE ON referral_codes 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Insert sample referral codes for testing (optional)
-- This can be removed in production
INSERT INTO referral_codes (affiliate_id, code, type, commission_rate, is_active) 
SELECT 
    id,
    'AFF_' || UPPER(SUBSTRING(MD5(RANDOM()::TEXT), 1, 6)),
    'BOTH',
    30.0,
    true
FROM affiliate_profiles 
WHERE NOT EXISTS (
    SELECT 1 FROM referral_codes WHERE referral_codes.affiliate_id = affiliate_profiles.id
)
LIMIT 5;

-- Add comments for documentation
COMMENT ON TABLE referral_codes IS 'Stores referral codes generated by affiliates for tracking referrals';
COMMENT ON TABLE referral_usages IS 'Tracks when referral codes are used by users';
COMMENT ON COLUMN referral_codes.code IS 'Unique referral code (e.g., AFF_ABC123)';
COMMENT ON COLUMN referral_codes.type IS 'Type of referral: SIGNUP, PRODUCT, or BOTH';
COMMENT ON COLUMN referral_codes.commission_rate IS 'Commission rate percentage for this referral code';
COMMENT ON COLUMN referral_usages.commission_amount IS 'Commission amount earned from this referral usage';
COMMENT ON COLUMN referral_usages.status IS 'Status of the referral usage: PENDING, APPROVED, PAID, REJECTED';
