
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  status: 'status',
  avatar: 'avatar',
  phone: 'phone',
  timezone: 'timezone',
  language: 'language',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.AffiliateProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  website: 'website',
  phone: 'phone',
  socialMedia: 'socialMedia',
  paymentMethod: 'paymentMethod',
  paymentEmail: 'paymentEmail',
  taxId: 'taxId',
  address: 'address',
  bankAccount: 'bankAccount',
  kycVerified: 'kycVerified',
  tier: 'tier',
  commissionRate: 'commissionRate',
  totalEarnings: 'totalEarnings',
  totalClicks: 'totalClicks',
  totalConversions: 'totalConversions',
  conversionRate: 'conversionRate',
  lastActivityAt: 'lastActivityAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissions: 'permissions',
  department: 'department',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfferScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  category: 'category',
  categoryId: 'categoryId',
  commissionRate: 'commissionRate',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  terms: 'terms',
  requirements: 'requirements',
  tags: 'tags',
  totalClicks: 'totalClicks',
  totalConversions: 'totalConversions',
  totalRevenue: 'totalRevenue',
  totalCommissions: 'totalCommissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfferApplicationScalarFieldEnum = {
  id: 'id',
  affiliateId: 'affiliateId',
  offerId: 'offerId',
  status: 'status',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AffiliateLinkScalarFieldEnum = {
  id: 'id',
  affiliateId: 'affiliateId',
  offerId: 'offerId',
  originalUrl: 'originalUrl',
  shortUrl: 'shortUrl',
  customSlug: 'customSlug',
  clicks: 'clicks',
  conversions: 'conversions',
  earnings: 'earnings',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClickScalarFieldEnum = {
  id: 'id',
  linkId: 'linkId',
  affiliateId: 'affiliateId',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  country: 'country',
  city: 'city',
  device: 'device',
  browser: 'browser',
  os: 'os',
  source: 'source',
  converted: 'converted',
  conversionId: 'conversionId',
  createdAt: 'createdAt',
  timestamp: 'timestamp'
};

exports.Prisma.ConversionScalarFieldEnum = {
  id: 'id',
  clickId: 'clickId',
  affiliateId: 'affiliateId',
  offerId: 'offerId',
  userId: 'userId',
  customerEmail: 'customerEmail',
  customerValue: 'customerValue',
  orderValue: 'orderValue',
  commissionAmount: 'commissionAmount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversionEventScalarFieldEnum = {
  id: 'id',
  trackingLinkId: 'trackingLinkId',
  clickEventId: 'clickEventId',
  affiliateId: 'affiliateId',
  offerId: 'offerId',
  value: 'value',
  currency: 'currency',
  commission: 'commission',
  data: 'data',
  timestamp: 'timestamp'
};

exports.Prisma.CommissionScalarFieldEnum = {
  id: 'id',
  conversionId: 'conversionId',
  affiliateId: 'affiliateId',
  payoutId: 'payoutId',
  amount: 'amount',
  rate: 'rate',
  status: 'status',
  payoutDate: 'payoutDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralCodeScalarFieldEnum = {
  id: 'id',
  affiliateId: 'affiliateId',
  code: 'code',
  type: 'type',
  commissionRate: 'commissionRate',
  productId: 'productId',
  maxUses: 'maxUses',
  currentUses: 'currentUses',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralUsageScalarFieldEnum = {
  id: 'id',
  referralCodeId: 'referralCodeId',
  userId: 'userId',
  type: 'type',
  productId: 'productId',
  orderValue: 'orderValue',
  commissionAmount: 'commissionAmount',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.AffiliateClickScalarFieldEnum = {
  id: 'id',
  affiliateId: 'affiliateId',
  referralCode: 'referralCode',
  storeId: 'storeId',
  url: 'url',
  referrer: 'referrer',
  userAgent: 'userAgent',
  utmSource: 'utmSource',
  utmMedium: 'utmMedium',
  utmCampaign: 'utmCampaign',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.AffiliateOrderScalarFieldEnum = {
  id: 'id',
  affiliateId: 'affiliateId',
  referralCode: 'referralCode',
  storeId: 'storeId',
  orderId: 'orderId',
  orderValue: 'orderValue',
  currency: 'currency',
  customerEmail: 'customerEmail',
  commissionAmount: 'commissionAmount',
  commissionRate: 'commissionRate',
  status: 'status',
  items: 'items',
  utmSource: 'utmSource',
  utmMedium: 'utmMedium',
  utmCampaign: 'utmCampaign',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayoutScalarFieldEnum = {
  id: 'id',
  affiliateId: 'affiliateId',
  paymentMethodId: 'paymentMethodId',
  amount: 'amount',
  method: 'method',
  status: 'status',
  referenceId: 'referenceId',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreativeScalarFieldEnum = {
  id: 'id',
  offerId: 'offerId',
  name: 'name',
  type: 'type',
  size: 'size',
  format: 'format',
  url: 'url',
  downloadUrl: 'downloadUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  affiliateId: 'affiliateId',
  code: 'code',
  description: 'description',
  discount: 'discount',
  validUntil: 'validUntil',
  usage: 'usage',
  maxUsage: 'maxUsage',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  read: 'read',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  events: 'events',
  secret: 'secret',
  status: 'status',
  lastTriggered: 'lastTriggered',
  successRate: 'successRate',
  totalCalls: 'totalCalls',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrafficRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  conditions: 'conditions',
  action: 'action',
  status: 'status',
  hits: 'hits',
  lastTriggered: 'lastTriggered',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RedirectRuleScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  sourceUrl: 'sourceUrl',
  targetUrl: 'targetUrl',
  type: 'type',
  status: 'status',
  conditions: 'conditions',
  settings: 'settings',
  stats: 'stats',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RedirectEventScalarFieldEnum = {
  id: 'id',
  redirectRuleId: 'redirectRuleId',
  ruleId: 'ruleId',
  clickId: 'clickId',
  sourceUrl: 'sourceUrl',
  targetUrl: 'targetUrl',
  queryParams: 'queryParams',
  headers: 'headers',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  country: 'country',
  city: 'city',
  device: 'device',
  browser: 'browser',
  os: 'os',
  timestamp: 'timestamp',
  conversionId: 'conversionId'
};

exports.Prisma.BounceEventScalarFieldEnum = {
  id: 'id',
  redirectEventId: 'redirectEventId',
  timeOnPage: 'timeOnPage',
  pagesViewed: 'pagesViewed',
  exitPage: 'exitPage',
  data: 'data',
  timestamp: 'timestamp'
};

exports.Prisma.RegistrationFormScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  fields: 'fields',
  settings: 'settings',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegistrationSubmissionScalarFieldEnum = {
  id: 'id',
  formId: 'formId',
  data: 'data',
  status: 'status',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  notes: 'notes',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegistrationWorkflowScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  formId: 'formId',
  name: 'name',
  description: 'description',
  steps: 'steps',
  conditions: 'conditions',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SmartLinkScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  baseUrl: 'baseUrl',
  shortCode: 'shortCode',
  type: 'type',
  status: 'status',
  settings: 'settings',
  targets: 'targets',
  rules: 'rules',
  stats: 'stats',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SmartLinkEventScalarFieldEnum = {
  id: 'id',
  smartLinkId: 'smartLinkId',
  clickId: 'clickId',
  targetId: 'targetId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  country: 'country',
  city: 'city',
  device: 'device',
  browser: 'browser',
  os: 'os',
  data: 'data',
  timestamp: 'timestamp'
};

exports.Prisma.SmartLinkConversionScalarFieldEnum = {
  id: 'id',
  smartLinkId: 'smartLinkId',
  smartLinkEventId: 'smartLinkEventId',
  eventId: 'eventId',
  value: 'value',
  currency: 'currency',
  commission: 'commission',
  data: 'data',
  timestamp: 'timestamp'
};

exports.Prisma.TrackingCodeScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  code: 'code',
  type: 'type',
  placement: 'placement',
  events: 'events',
  parameters: 'parameters',
  settings: 'settings',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrackingEventScalarFieldEnum = {
  id: 'id',
  trackingCodeId: 'trackingCodeId',
  eventType: 'eventType',
  event: 'event',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  data: 'data',
  timestamp: 'timestamp'
};

exports.Prisma.TrackingLinkScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  affiliateId: 'affiliateId',
  offerId: 'offerId',
  name: 'name',
  description: 'description',
  originalUrl: 'originalUrl',
  trackingUrl: 'trackingUrl',
  shortCode: 'shortCode',
  type: 'type',
  parameters: 'parameters',
  rules: 'rules',
  stats: 'stats',
  settings: 'settings',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClickEventScalarFieldEnum = {
  id: 'id',
  trackingLinkId: 'trackingLinkId',
  affiliateId: 'affiliateId',
  offerId: 'offerId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  country: 'country',
  city: 'city',
  device: 'device',
  browser: 'browser',
  os: 'os',
  data: 'data',
  timestamp: 'timestamp',
  conversionId: 'conversionId'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  general: 'general',
  security: 'security',
  currencies: 'currencies',
  notifications: 'notifications',
  integrations: 'integrations',
  performance: 'performance',
  compliance: 'compliance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TermsConditionsScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  type: 'type',
  title: 'title',
  content: 'content',
  version: 'version',
  status: 'status',
  isActive: 'isActive',
  effectiveDate: 'effectiveDate',
  expiryDate: 'expiryDate',
  requiresAcceptance: 'requiresAcceptance',
  acceptanceRequired: 'acceptanceRequired',
  lastModifiedBy: 'lastModifiedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TermsAcceptanceScalarFieldEnum = {
  id: 'id',
  termsId: 'termsId',
  userId: 'userId',
  userRole: 'userRole',
  version: 'version',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  acceptedAt: 'acceptedAt'
};

exports.Prisma.TermsTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  category: 'category',
  content: 'content',
  variables: 'variables',
  isDefault: 'isDefault',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ManualProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  manualId: 'manualId',
  progress: 'progress',
  completed: 'completed',
  lastReadAt: 'lastReadAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ManualCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  order: 'order',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ManualScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  title: 'title',
  content: 'content',
  order: 'order',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ManualTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  label: 'label',
  type: 'type',
  url: 'url',
  icon: 'icon',
  level: 'level',
  order: 'order',
  permissions: 'permissions',
  roles: 'roles',
  status: 'status',
  isVisible: 'isVisible',
  isExternal: 'isExternal',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuStructureScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  items: 'items',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  structure: 'structure',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuPermissionScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  role: 'role',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MlmStructureScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  type: 'type',
  maxLevels: 'maxLevels',
  settings: 'settings',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MlmRelationshipScalarFieldEnum = {
  id: 'id',
  structureId: 'structureId',
  sponsorId: 'sponsorId',
  affiliateId: 'affiliateId',
  position: 'position',
  level: 'level',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfferCategoryScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  order: 'order',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfferTagScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  color: 'color',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfferGroupScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  offers: 'offers',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfferTemplateScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  template: 'template',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfferOrganizationScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  settings: 'settings',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodConfigScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  type: 'type',
  settings: 'settings',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodUsageScalarFieldEnum = {
  id: 'id',
  paymentMethodId: 'paymentMethodId',
  affiliateId: 'affiliateId',
  usage: 'usage',
  lastUsed: 'lastUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PersonalTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  token: 'token',
  permissions: 'permissions',
  expiresAt: 'expiresAt',
  lastUsedAt: 'lastUsedAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenUsageScalarFieldEnum = {
  id: 'id',
  tokenId: 'tokenId',
  endpoint: 'endpoint',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.PostbackScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  url: 'url',
  method: 'method',
  headers: 'headers',
  parameters: 'parameters',
  events: 'events',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostbackLogScalarFieldEnum = {
  id: 'id',
  postbackId: 'postbackId',
  event: 'event',
  data: 'data',
  response: 'response',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  avatar: 'avatar',
  bio: 'bio',
  settings: 'settings',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QualityRuleScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  conditions: 'conditions',
  actions: 'actions',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QualityCheckScalarFieldEnum = {
  id: 'id',
  ruleId: 'ruleId',
  affiliateId: 'affiliateId',
  result: 'result',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TierScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  level: 'level',
  minClicks: 'minClicks',
  minConversions: 'minConversions',
  minRevenue: 'minRevenue',
  commissionRate: 'commissionRate',
  benefits: 'benefits',
  requirements: 'requirements',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TierAssignmentScalarFieldEnum = {
  id: 'id',
  tierId: 'tierId',
  affiliateId: 'affiliateId',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  reason: 'reason',
  status: 'status',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TierProgressScalarFieldEnum = {
  id: 'id',
  affiliateId: 'affiliateId',
  tierId: 'tierId',
  currentClicks: 'currentClicks',
  currentConversions: 'currentConversions',
  currentRevenue: 'currentRevenue',
  currentEarnings: 'currentEarnings',
  currentReferrals: 'currentReferrals',
  progress: 'progress',
  progressPercentage: 'progressPercentage',
  lastUpdated: 'lastUpdated',
  nextTierId: 'nextTierId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntegrationKnowledgeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  category: 'category',
  tags: 'tags',
  isPublic: 'isPublic',
  accountId: 'accountId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntegrationManualScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  category: 'category',
  tags: 'tags',
  isPublic: 'isPublic',
  accountId: 'accountId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ManualCommentScalarFieldEnum = {
  id: 'id',
  manualId: 'manualId',
  userId: 'userId',
  content: 'content',
  isInternal: 'isInternal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ManualRatingScalarFieldEnum = {
  id: 'id',
  manualId: 'manualId',
  userId: 'userId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AffiliateManagerScalarFieldEnum = {
  id: 'id',
  affiliateId: 'affiliateId',
  managerId: 'managerId',
  accountId: 'accountId',
  assignedAt: 'assignedAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ManagerActivityScalarFieldEnum = {
  id: 'id',
  managerId: 'managerId',
  affiliateId: 'affiliateId',
  type: 'type',
  description: 'description',
  data: 'data',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.ManagerPerformanceScalarFieldEnum = {
  id: 'id',
  managerId: 'managerId',
  period: 'period',
  metrics: 'metrics',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnuraConfigScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  apiKey: 'apiKey',
  settings: 'settings',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnuraCheckScalarFieldEnum = {
  id: 'id',
  affiliateId: 'affiliateId',
  clickId: 'clickId',
  result: 'result',
  score: 'score',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  permissions: 'permissions',
  accountId: 'accountId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRoleAssignmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  accountId: 'accountId',
  assignedAt: 'assignedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccessControlScalarFieldEnum = {
  id: 'id',
  resource: 'resource',
  action: 'action',
  roleId: 'roleId',
  userId: 'userId',
  accountId: 'accountId',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  accountId: 'accountId',
  timestamp: 'timestamp'
};

exports.Prisma.TwoFactorAuthScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  secret: 'secret',
  backupCodes: 'backupCodes',
  isEnabled: 'isEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttributionModelScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  type: 'type',
  settings: 'settings',
  rules: 'rules',
  status: 'status',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttributionEventScalarFieldEnum = {
  id: 'id',
  conversionId: 'conversionId',
  clickId: 'clickId',
  affiliateId: 'affiliateId',
  offerId: 'offerId',
  credit: 'credit',
  weight: 'weight',
  position: 'position',
  timestamp: 'timestamp',
  data: 'data'
};

exports.Prisma.AttributionReportScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  name: 'name',
  description: 'description',
  modelId: 'modelId',
  dateRange: 'dateRange',
  filters: 'filters',
  metrics: 'metrics',
  dimensions: 'dimensions',
  status: 'status',
  results: 'results',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FraudRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  conditions: 'conditions',
  actions: 'actions',
  severity: 'severity',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FraudEventScalarFieldEnum = {
  id: 'id',
  ruleId: 'ruleId',
  type: 'type',
  severity: 'severity',
  data: 'data',
  score: 'score',
  status: 'status',
  action: 'action',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  affiliateId: 'affiliateId',
  clickId: 'clickId',
  conversionId: 'conversionId',
  createdAt: 'createdAt',
  reviewedAt: 'reviewedAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  AFFILIATE: 'AFFILIATE',
  MANAGER: 'MANAGER'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING: 'PENDING'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  PAYPAL: 'PAYPAL',
  STRIPE: 'STRIPE',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CRYPTO: 'CRYPTO',
  WISE: 'WISE'
};

exports.AffiliateTier = exports.$Enums.AffiliateTier = {
  BRONZE: 'BRONZE',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM'
};

exports.OfferStatus = exports.$Enums.OfferStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAUSED: 'PAUSED',
  EXPIRED: 'EXPIRED'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.ConversionStatus = exports.$Enums.ConversionStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  DECLINED: 'DECLINED',
  REFUNDED: 'REFUNDED'
};

exports.CommissionStatus = exports.$Enums.CommissionStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED'
};

exports.ReferralType = exports.$Enums.ReferralType = {
  SIGNUP: 'SIGNUP',
  PRODUCT: 'PRODUCT',
  BOTH: 'BOTH'
};

exports.ReferralStatus = exports.$Enums.ReferralStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  PAID: 'PAID',
  REJECTED: 'REJECTED'
};

exports.PayoutStatus = exports.$Enums.PayoutStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.CreativeType = exports.$Enums.CreativeType = {
  BANNER: 'BANNER',
  LOGO: 'LOGO',
  SOCIAL_MEDIA: 'SOCIAL_MEDIA',
  EMAIL_TEMPLATE: 'EMAIL_TEMPLATE',
  VIDEO: 'VIDEO'
};

exports.CouponStatus = exports.$Enums.CouponStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  EXPIRED: 'EXPIRED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  SYSTEM: 'SYSTEM'
};

exports.WebhookStatus = exports.$Enums.WebhookStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ERROR: 'ERROR'
};

exports.RuleType = exports.$Enums.RuleType = {
  IP_BLOCKING: 'IP_BLOCKING',
  RATE_LIMITING: 'RATE_LIMITING',
  BOT_DETECTION: 'BOT_DETECTION',
  GEO_BLOCKING: 'GEO_BLOCKING',
  DEVICE_BLOCKING: 'DEVICE_BLOCKING'
};

exports.RuleAction = exports.$Enums.RuleAction = {
  BLOCK: 'BLOCK',
  ALLOW: 'ALLOW',
  REDIRECT: 'REDIRECT',
  CAPTCHA: 'CAPTCHA'
};

exports.RuleStatus = exports.$Enums.RuleStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  TESTING: 'TESTING'
};

exports.RedirectType = exports.$Enums.RedirectType = {
  PERMANENT: 'PERMANENT',
  TEMPORARY: 'TEMPORARY',
  SMART: 'SMART',
  CONDITIONAL: 'CONDITIONAL'
};

exports.RedirectStatus = exports.$Enums.RedirectStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAUSED: 'PAUSED'
};

exports.FormStatus = exports.$Enums.FormStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.SubmissionStatus = exports.$Enums.SubmissionStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.WorkflowStatus = exports.$Enums.WorkflowStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAUSED: 'PAUSED'
};

exports.SmartLinkType = exports.$Enums.SmartLinkType = {
  DYNAMIC: 'DYNAMIC',
  A_B_TEST: 'A_B_TEST',
  GEO_TARGETED: 'GEO_TARGETED',
  DEVICE_TARGETED: 'DEVICE_TARGETED',
  TIME_TARGETED: 'TIME_TARGETED',
  CUSTOM: 'CUSTOM'
};

exports.LinkStatus = exports.$Enums.LinkStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAUSED: 'PAUSED'
};

exports.TrackingType = exports.$Enums.TrackingType = {
  CLICK: 'CLICK',
  CONVERSION: 'CONVERSION',
  CUSTOM: 'CUSTOM'
};

exports.TrackingStatus = exports.$Enums.TrackingStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAUSED: 'PAUSED'
};

exports.TierStatus = exports.$Enums.TierStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAUSED: 'PAUSED'
};

exports.AssignmentStatus = exports.$Enums.AssignmentStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  EXPIRED: 'EXPIRED'
};

exports.AttributionType = exports.$Enums.AttributionType = {
  FIRST_CLICK: 'FIRST_CLICK',
  LAST_CLICK: 'LAST_CLICK',
  LINEAR: 'LINEAR',
  TIME_DECAY: 'TIME_DECAY',
  POSITION_BASED: 'POSITION_BASED',
  CUSTOM: 'CUSTOM'
};

exports.FraudType = exports.$Enums.FraudType = {
  CLICK_FRAUD: 'CLICK_FRAUD',
  CONVERSION_FRAUD: 'CONVERSION_FRAUD',
  TRAFFIC_QUALITY: 'TRAFFIC_QUALITY',
  GEO_BLOCKING: 'GEO_BLOCKING',
  DEVICE_FINGERPRINTING: 'DEVICE_FINGERPRINTING'
};

exports.FraudSeverity = exports.$Enums.FraudSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  AffiliateProfile: 'AffiliateProfile',
  AdminProfile: 'AdminProfile',
  Offer: 'Offer',
  OfferApplication: 'OfferApplication',
  AffiliateLink: 'AffiliateLink',
  Click: 'Click',
  Conversion: 'Conversion',
  ConversionEvent: 'ConversionEvent',
  Commission: 'Commission',
  ReferralCode: 'ReferralCode',
  ReferralUsage: 'ReferralUsage',
  AffiliateClick: 'AffiliateClick',
  AffiliateOrder: 'AffiliateOrder',
  Payout: 'Payout',
  Creative: 'Creative',
  Coupon: 'Coupon',
  Notification: 'Notification',
  Activity: 'Activity',
  Webhook: 'Webhook',
  TrafficRule: 'TrafficRule',
  RedirectRule: 'RedirectRule',
  RedirectEvent: 'RedirectEvent',
  BounceEvent: 'BounceEvent',
  RegistrationForm: 'RegistrationForm',
  RegistrationSubmission: 'RegistrationSubmission',
  RegistrationWorkflow: 'RegistrationWorkflow',
  SmartLink: 'SmartLink',
  SmartLinkEvent: 'SmartLinkEvent',
  SmartLinkConversion: 'SmartLinkConversion',
  TrackingCode: 'TrackingCode',
  TrackingEvent: 'TrackingEvent',
  TrackingLink: 'TrackingLink',
  ClickEvent: 'ClickEvent',
  SystemSettings: 'SystemSettings',
  TermsConditions: 'TermsConditions',
  TermsAcceptance: 'TermsAcceptance',
  TermsTemplate: 'TermsTemplate',
  ManualProgress: 'ManualProgress',
  ManualCategory: 'ManualCategory',
  Manual: 'Manual',
  ManualTag: 'ManualTag',
  MenuItem: 'MenuItem',
  MenuStructure: 'MenuStructure',
  MenuTemplate: 'MenuTemplate',
  MenuPermission: 'MenuPermission',
  MlmStructure: 'MlmStructure',
  MlmRelationship: 'MlmRelationship',
  OfferCategory: 'OfferCategory',
  OfferTag: 'OfferTag',
  OfferGroup: 'OfferGroup',
  OfferTemplate: 'OfferTemplate',
  OfferOrganization: 'OfferOrganization',
  PaymentMethodConfig: 'PaymentMethodConfig',
  PaymentMethodUsage: 'PaymentMethodUsage',
  PersonalToken: 'PersonalToken',
  TokenUsage: 'TokenUsage',
  Postback: 'Postback',
  PostbackLog: 'PostbackLog',
  UserProfile: 'UserProfile',
  QualityRule: 'QualityRule',
  QualityCheck: 'QualityCheck',
  Tier: 'Tier',
  TierAssignment: 'TierAssignment',
  TierProgress: 'TierProgress',
  IntegrationKnowledge: 'IntegrationKnowledge',
  IntegrationManual: 'IntegrationManual',
  ManualComment: 'ManualComment',
  ManualRating: 'ManualRating',
  AffiliateManager: 'AffiliateManager',
  ManagerActivity: 'ManagerActivity',
  ManagerPerformance: 'ManagerPerformance',
  AnuraConfig: 'AnuraConfig',
  AnuraCheck: 'AnuraCheck',
  Role: 'Role',
  UserRoleAssignment: 'UserRoleAssignment',
  AccessControl: 'AccessControl',
  AuditLog: 'AuditLog',
  TwoFactorAuth: 'TwoFactorAuth',
  AttributionModel: 'AttributionModel',
  AttributionEvent: 'AttributionEvent',
  AttributionReport: 'AttributionReport',
  FraudRule: 'FraudRule',
  FraudEvent: 'FraudEvent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
